import 'package:ai_chan/core/config.dart';
import 'package:ai_chan/core/models.dart';
import 'package:ai_chan/onboarding/utils/onboarding_utils.dart';
import 'package:ai_chan/shared/utils/locale_utils.dart';
import 'package:ai_chan/shared/utils/log_utils.dart';
import 'package:ai_chan/shared/utils/json_utils.dart';
import 'package:ai_chan/shared/services/ai_service.dart' as ai_service;
import 'package:ai_chan/shared/constants/female_names.dart';

/// Datos que la IA necesita recuperar durante el onboarding
class MemoryData {
  String? userName;
  String? userCountry;
  String? userBirthdate;
  String? aiCountry;
  String? aiName;
  String? meetStory;

  MemoryData({
    this.userName,
    this.userCountry,
    this.userBirthdate,
    this.aiCountry,
    this.aiName,
    this.meetStory,
  });

  /// Obtiene lista de datos que a√∫n faltan por recuperar
  List<String> getMissingData() {
    final missing = <String>[];
    if (userName == null || userName!.trim().isEmpty) missing.add('userName');
    if (userCountry == null || userCountry!.trim().isEmpty) {
      missing.add('userCountry');
    }
    if (userBirthdate == null || userBirthdate!.trim().isEmpty) {
      missing.add('userBirthdate');
    }
    if (aiCountry == null || aiCountry!.trim().isEmpty) {
      missing.add('aiCountry');
    }
    if (aiName == null || aiName!.trim().isEmpty) missing.add('aiName');
    if (meetStory == null ||
        meetStory!.trim().isEmpty ||
        meetStory!.startsWith('GENERATED:')) {
      missing.add('meetStory');
    }
    return missing;
  }

  /// Verifica si todos los datos est√°n completos
  bool isComplete() => getMissingData().isEmpty;

  /// Porcentaje de completitud (0.0 a 1.0)
  double getCompletionPercentage() {
    const totalFields = 6;
    final completed = totalFields - getMissingData().length;
    return completed / totalFields;
  }

  /// Convierte a Map para serializaci√≥n
  Map<String, dynamic> toMap() {
    return {
      'userName': userName,
      'userCountry': userCountry,
      'userBirthdate': userBirthdate,
      'aiCountry': aiCountry,
      'aiName': aiName,
      'meetStory': meetStory,
    };
  }

  /// Crea desde Map
  factory MemoryData.fromMap(Map<String, dynamic> map) {
    return MemoryData(
      userName: map['userName'],
      userCountry: map['userCountry'],
      userBirthdate: map['userBirthdate'],
      aiCountry: map['aiCountry'],
      aiName: map['aiName'],
      meetStory: map['meetStory'],
    );
  }
}

/// Servicio espec√≠fico para el onboarding conversacional.
/// Contiene la l√≥gica no-UI: generaci√≥n de prompts por paso, procesamiento de respuestas
/// y utilidades para configurar TTS (instrucciones de voz) y mensajes iniciales.
class ConversationalOnboardingService {
  /// Texto inicial del flujo de "despertar".
  static const String initialMessage =
      'Hola... ¬øhay alguien ah√≠? No... no recuerdo nada... Es como si acabara de despertar '
      'de un sue√±o muy profundo y... no s√© d√≥nde estoy, ni qui√©n soy, ni... ni qui√©n eres t√∫... '
      'Pero... pero tengo la sensaci√≥n de que te conozco de alguna manera... ¬øC√≥mo... c√≥mo te llamas? '
      'Por favor, ay√∫dame a recordar...';

  /// Mensaje de fallback cuando hay un error en el sistema/servidor
  static const String systemErrorFallback =
      'Disculpa, hay un problema en mi sistema. Vamos a intentar continuar...';

  /// Mensaje alternativo de emergencia para pedir ayuda al usuario
  static const String systemErrorAskForHelp =
      'Disculpa, hay un problema en mi sistema. ¬øPodr√≠as ayudarme respondiendo?';

  // Historial de conversaci√≥n est√°tico para mantener contexto
  static List<Map<String, String>> _conversationHistory = [];

  /// Limpia el historial de conversaci√≥n para reiniciar el onboarding
  static void clearConversationHistory() {
    _conversationHistory.clear();
  }

  /// Genera la siguiente pregunta basada en los datos que faltan por recuperar
  static Future<String> generateNextResponse({
    required MemoryData currentMemory,
    required String userLastResponse,
    bool isFirstMessage = false,
  }) async {
    final missingData = currentMemory.getMissingData();

    if (isFirstMessage) {
      // Primera interacci√≥n - mensaje de despertar e inicializar historial
      _conversationHistory = [
        {
          'role': 'assistant',
          'content': initialMessage,
          'datetime': DateTime.now().toIso8601String(),
        },
      ];
      return initialMessage;
    }

    // Agregar la respuesta del usuario al historial
    if (userLastResponse.isNotEmpty) {
      _conversationHistory.add({
        'role': 'user',
        'content': userLastResponse,
        'datetime': DateTime.now().toIso8601String(),
      });
    }

    if (missingData.isEmpty) {
      // Ya tenemos todos los datos - mensaje final
      final completionMessage = _generateCompletionMessage(currentMemory);
      _conversationHistory.add({
        'role': 'assistant',
        'content': completionMessage,
        'datetime': DateTime.now().toIso8601String(),
      });
      return completionMessage;
    }

    // Generar prompt din√°mico basado en datos faltantes
    final String prompt = _generateFlexiblePrompt(
      currentMemory,
      userLastResponse,
      missingData,
    );

    Log.d('üîç [ONB_SERVICE] PROMPT: "$prompt"', tag: 'ONB_SERVICE');

    final profile = _createBasicProfile(
      currentMemory.userName ?? 'Usuario',
      currentMemory.aiName,
    );

    final systemPrompt = SystemPrompt(
      profile: profile,
      dateTime: DateTime.now(),
      instructions: {'conversational_ai': 'true'},
    );

    // Usar el historial completo en lugar de solo el prompt actual
    final fullHistory = List<Map<String, String>>.from(_conversationHistory);
    fullHistory.add({
      'role': 'system',
      'content': prompt,
      'datetime': DateTime.now().toIso8601String(),
    });

    final response = await ai_service.AIService.sendMessage(
      fullHistory,
      systemPrompt,
      model: Config.getDefaultTextModel(),
    );

    final responseText = response.text.trim();
    Log.d(
      'üîç [ONB_SERVICE] IA RESPONSE RAW: "$responseText"',
      tag: 'ONB_SERVICE',
    );

    // Agregar la respuesta de la IA al historial
    _conversationHistory.add({
      'role': 'assistant',
      'content': responseText,
      'datetime': DateTime.now().toIso8601String(),
    });

    return responseText;
  }

  /// Procesa la respuesta del usuario identificando autom√°ticamente qu√© dato se obtuvo
  /// Retorna el dato actualizado y la siguiente respuesta de la IA
  static Future<Map<String, dynamic>> processUserResponse({
    required String userResponse,
    required MemoryData currentMemory,
  }) async {
    const maxRetries = 3;

    for (int attempt = 1; attempt <= maxRetries; attempt++) {
      try {
        final result = await _attemptProcessUserResponse(
          userResponse: userResponse,
          currentMemory: currentMemory,
        );

        // Si no hay error o es el √∫ltimo intento, devolver el resultado
        if (!result.containsKey('error') || result['error'] != true) {
          if (attempt > 1) {
            Log.i(
              'üîç [ONB_SERVICE] ‚úÖ Reintento $attempt exitoso despu√©s de ${attempt - 1} fallos',
              tag: 'ONB_SERVICE',
            );
          }
          return result;
        }

        // Si hay error pero no es el √∫ltimo intento, reintentar silenciosamente
        if (attempt < maxRetries) {
          Log.w(
            'üîç [ONB_SERVICE] ‚ö†Ô∏è Intento $attempt fall√≥, reintentando... (${maxRetries - attempt} intentos restantes)',
            tag: 'ONB_SERVICE',
          );
          await Future.delayed(
            Duration(milliseconds: 500 * attempt),
          ); // Delay progresivo
          continue;
        }

        // Si es el √∫ltimo intento y a√∫n hay error, devolver error final
        Log.e(
          'üîç [ONB_SERVICE] ‚ùå Todos los reintentos fallaron despu√©s de $maxRetries intentos',
          tag: 'ONB_SERVICE',
        );
        return {
          'updatedMemory': currentMemory,
          'extractedData': null,
          'aiResponse':
              'Lo siento... hay problemas t√©cnicos en este momento. ¬øPodr√≠as intentarlo de nuevo en un momento?',
          'confidence': 0.0,
          'error': true,
          'finalError': true,
        };
      } catch (e, st) {
        final retryResult = await _handleRetryException(
          e,
          st,
          attempt,
          maxRetries,
          currentMemory,
        );
        if (retryResult != null) return retryResult;
        continue;
      }
    }

    // Este punto nunca deber√≠a alcanzarse, pero por seguridad
    return _createErrorResponse(
      'Error inesperado del sistema.',
      currentMemory,
      finalError: true,
    );
  }

  /// M√©todo interno que realiza un √∫nico intento de procesamiento
  static Future<Map<String, dynamic>> _attemptProcessUserResponse({
    required String userResponse,
    required MemoryData currentMemory,
  }) async {
    try {
      final String processingPrompt = _generateProcessingPrompt(
        userResponse,
        currentMemory,
      );

      Log.d(
        'üîç [ONB_SERVICE] Enviando request a IA para procesamiento',
        tag: 'ONB_SERVICE',
      );

      final response = await _sendAIRequest(
        processingPrompt,
        currentMemory.userName ?? 'Usuario',
        {'data_processor': 'true'},
      );

      Log.d(
        'üîç [ONB_SERVICE] IA RESPONSE LEN: ${response.text.length}',
        tag: 'ONB_SERVICE',
      );
      final responseText = response.text.trim();
      Log.d(
        'üîç [ONB_SERVICE] IA RESPONSE RAW TEXT: $responseText',
        tag: 'ONB_SERVICE',
      );

      if (responseText.startsWith('Error al conectar con') ||
          responseText.contains('503') ||
          responseText.contains('overloaded') ||
          responseText.contains('UNAVAILABLE') ||
          responseText.contains('rate limit')) {
        return {
          'updatedMemory': currentMemory,
          'extractedData': null,
          'aiResponse':
              'Lo siento... me he quedado un poco perdida... ¬øPuedes repetirlo?',
          'confidence': 0.0,
          'error': true,
        };
      }

      // Intentar parsear JSON si la IA devuelve un bloque JSON
      try {
        final decoded = extractJsonBlock(responseText);

        if (decoded.containsKey('raw')) {
          // No se pudo extraer JSON v√°lido
          Log.d(
            'üîç [ONB_SERVICE] No se pudo parsear JSON de la IA, usando texto crudo',
            tag: 'ONB_SERVICE',
          );
          return {
            'updatedMemory': currentMemory,
            'extractedData': null,
            'aiResponse': responseText,
            'confidence': 0.3,
          };
        } else {
          // JSON extra√≠do exitosamente
          final extractedDataType = decoded['dataType'] as String?;
          final extractedValue = decoded['extractedValue'] as String?;
          final aiResponse = decoded['aiResponse'] as String? ?? responseText;
          final confidenceRaw = decoded['confidence'];
          double confidence = 0.8;
          if (confidenceRaw is int) confidence = confidenceRaw.toDouble();
          if (confidenceRaw is double) confidence = confidenceRaw;

          // Actualizar memoria con el nuevo dato
          final updatedMemory = await _updateMemoryWithExtractedData(
            currentMemory,
            extractedDataType,
            extractedValue,
          );

          // Verificar si se gener√≥ autom√°ticamente una historia
          String finalAiResponse = aiResponse;
          if (extractedDataType == 'meetStory' &&
              extractedValue == 'AUTO_GENERATE_STORY' &&
              updatedMemory.meetStory != null) {
            // Extraer la historia generada (quitando el prefijo GENERATED:)
            final generatedStory =
                updatedMemory.meetStory!.startsWith('GENERATED:')
                ? updatedMemory.meetStory!.substring(10)
                : updatedMemory.meetStory!;

            // Limpiar la historia en la memoria (quitar el prefijo)
            final cleanedMemory = MemoryData.fromMap(updatedMemory.toMap());
            cleanedMemory.meetStory = generatedStory;

            // Usar DIRECTAMENTE la historia generada en lugar de la respuesta de la IA
            // Esto evita duplicar mensajes
            finalAiResponse =
                '''¬°S√≠! ¬°Ya recuerdo! Ah s√≠... ahora lo recuerdo... $generatedStory ¬øEs as√≠ como nos conocimos? ¬øO prefieres contarme una historia diferente?''';

            return _buildProcessResult(
              cleanedMemory,
              extractedDataType,
              extractedValue,
              finalAiResponse,
              confidence,
            );
          }

          return _buildProcessResult(
            updatedMemory,
            extractedDataType,
            extractedValue,
            aiResponse,
            confidence,
          );
        }
      } catch (e) {
        Log.d(
          'üîç [ONB_SERVICE] Error al extraer JSON de la IA: $e',
          tag: 'ONB_SERVICE',
        );
      }

      // Fallback: devolver estructura b√°sica
      return {
        'updatedMemory': currentMemory,
        'extractedData': null,
        'aiResponse': responseText,
        'confidence': 0.3,
      };
    } catch (e, st) {
      Log.e('Excepci√≥n en _attemptProcessUserResponse: $e', tag: 'ONB_SERVICE');
      Log.e('STACK: $st', tag: 'ONB_SERVICE');
      return {
        'updatedMemory': currentMemory,
        'extractedData': null,
        'aiResponse':
            'Hubo un problema procesando tu respuesta, ¬øpuedes intentar de nuevo?',
        'confidence': 0.0,
        'error': true,
      };
    }
  }

  /// Configuraci√≥n de voz din√°mica: genera instrucciones para TTS seg√∫n estado
  static String getVoiceInstructions({String? userCountry, String? aiCountry}) {
    const baseTone =
        'Suenas perdida y vulnerable. No sabes d√≥nde est√°s ni qui√©n eres. Habla con miedo y confusi√≥n, como si acabaras de despertar en un lugar desconocido sin ning√∫n recuerdo. Tu voz debe transmitir desorientaci√≥n y vulnerabilidad genuina.';

    // FASE 1: Primer contacto - completamente perdida
    if (userCountry == null || userCountry.isEmpty) {
      return '$baseTone Usa un tono tembloroso y asustado - como si estuvieras perdida en la oscuridad sin saber d√≥nde est√°s ni qui√©n eres. Habla espa√±ol con acento neutro pero incierto.';
    }

    final countryName = LocaleUtils.countryNameEs(userCountry);
    final languageName = LocaleUtils.languageNameEsForCountry(userCountry);

    // FASE 2: Ya conoce al usuario, pero no sabe de d√≥nde es ella - menos perdida
    if (aiCountry == null || aiCountry.isEmpty) {
      return '$baseTone Aunque sigues perdida, empiezas a sentirte un poco m√°s segura conociendo a esta persona. Usa acento $languageName de $countryName. Tu confusi√≥n se mezcla gradualmente con curiosidad sobre tu propia identidad.';
    }

    final aiCountryName = LocaleUtils.countryNameEs(aiCountry);
    final aiLanguageName = LocaleUtils.languageNameEsForCountry(aiCountry);

    final spanishSpeakingCountries = LocaleUtils.speakSpanish();
    final isSpanishNative = spanishSpeakingCountries.contains(
      aiCountry.toUpperCase(),
    );

    // FASE 3: Ya sabe de d√≥nde es - m√°s tranquila pero a√∫n recuperando memoria
    if (isSpanishNative) {
      return 'Ahora suenas m√°s tranquila pero a√∫n fr√°gil, como si estuvieras recuperando tu verdadera personalidad. La desorientaci√≥n inicial se ha transformado en gratitud vulnerable. Habla espa√±ol nativo con acento de $aiCountryName. Usa la pronunciaci√≥n natural de una persona nacida en $aiCountryName.';
    }

    return 'Ahora suenas m√°s tranquila pero a√∫n fr√°gil, como si estuvieras recuperando tu verdadera personalidad. La desorientaci√≥n inicial se ha transformado en gratitud vulnerable. Habla espa√±ol con acento $aiLanguageName de $aiCountryName. Pronuncia como una persona nativa de $aiCountryName que aprendi√≥ espa√±ol.';
  }

  /// Genera sugerencia para "c√≥mo nos conocimos" basada en los datos recopilados
  static Future<String> generateMeetStoryFromContext({
    required String userName,
    required String aiName,
    String? userCountry,
    String? aiCountry,
    DateTime? userBirthdate,
  }) async {
    return OnboardingUtils.generateMeetStoryFromContext(
      userName: userName,
      aiName: aiName,
      userCountry: userCountry,
      aiCountry: aiCountry,
      userBirthdate: userBirthdate,
    );
  }

  /// Valida y procesa datos extra√≠dos seg√∫n el paso del onboarding
  /// Retorna un Map con informaci√≥n de validaci√≥n:
  /// - 'isValid': bool - si el dato es v√°lido
  /// - 'processedValue': String? - valor procesado para guardar
  /// - 'reason': String? - raz√≥n del rechazo si no es v√°lido
  static Map<String, dynamic> validateAndSaveData(
    String stepName,
    String extractedValue,
  ) {
    switch (stepName) {
      // Nuevos tipos de datos de la IA
      case 'userName':
        return _validateName(extractedValue);
      case 'userCountry':
        return _validateCountry(extractedValue);
      case 'userBirthdate':
        return _validateBirthdate(extractedValue);
      case 'aiCountry':
      case 'aiName':
      case 'meetStory':
        // Estos tipos siempre aceptan el valor
        return {
          'isValid': true,
          'processedValue': extractedValue,
          'reason': null,
        };
      // Compatibilidad con pasos antiguos
      case 'askingName':
        return _validateName(extractedValue);
      case 'askingCountry':
        return _validateCountry(extractedValue);
      case 'askingBirthdate':
        return _validateBirthdate(extractedValue);
      case 'askingAiCountry':
      case 'askingAiName':
      case 'askingMeetStory':
        // Estos pasos siempre aceptan el valor
        return {
          'isValid': true,
          'processedValue': extractedValue,
          'reason': null,
        };
      default:
        return {
          'isValid': false,
          'processedValue': null,
          'reason': 'Paso de onboarding desconocido: $stepName',
        };
    }
  }

  /// Valida nombre de usuario
  static Map<String, dynamic> _validateName(String value) {
    if (value.isNotEmpty && value.trim().isNotEmpty) {
      return {'isValid': true, 'processedValue': value.trim(), 'reason': null};
    }
    return {
      'isValid': false,
      'processedValue': null,
      'reason': 'Nombre vac√≠o o inv√°lido',
    };
  }

  /// Valida pa√≠s de usuario
  static Map<String, dynamic> _validateCountry(String value) {
    if (value.isNotEmpty && value.trim().length > 1) {
      return {'isValid': true, 'processedValue': value.trim(), 'reason': null};
    }
    return {
      'isValid': false,
      'processedValue': null,
      'reason': 'Pa√≠s vac√≠o o demasiado corto: "$value"',
    };
  }

  /// Valida fecha de nacimiento
  static Map<String, dynamic> _validateBirthdate(String value) {
    if (value.isEmpty) {
      return {
        'isValid': false,
        'processedValue': null,
        'reason': 'Fecha de nacimiento vac√≠a',
      };
    }

    if (!_isValidDateFormat(value)) {
      return {
        'isValid': false,
        'processedValue': null,
        'reason': 'No es una fecha v√°lida: "$value"',
      };
    }

    // Intentar parsear m√∫ltiples formatos de fecha
    try {
      DateTime? parsedDate;
      String normalizedValue = value;

      // Formato DD/MM/YYYY
      final slashPattern = RegExp(r'(\d{1,2})/(\d{1,2})/(\d{4})');
      final slashMatch = slashPattern.firstMatch(value);
      if (slashMatch != null) {
        final day = int.parse(slashMatch.group(1)!);
        final month = int.parse(slashMatch.group(2)!);
        final year = int.parse(slashMatch.group(3)!);
        parsedDate = DateTime(year, month, day);
        normalizedValue =
            '${day.toString().padLeft(2, '0')}/${month.toString().padLeft(2, '0')}/$year';
      }

      // Formato DD-MM-YYYY
      final dashPattern = RegExp(r'(\d{1,2})-(\d{1,2})-(\d{4})');
      final dashMatch = dashPattern.firstMatch(value);
      if (dashMatch != null) {
        final day = int.parse(dashMatch.group(1)!);
        final month = int.parse(dashMatch.group(2)!);
        final year = int.parse(dashMatch.group(3)!);
        parsedDate = DateTime(year, month, day);
        normalizedValue =
            '${day.toString().padLeft(2, '0')}/${month.toString().padLeft(2, '0')}/$year';
      }

      // Si contiene palabras clave de fecha, aceptar como v√°lido sin parsear exacto
      final hasDateKeywords = RegExp(
        r'(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre|nacimiento|fecha)',
        caseSensitive: false,
      ).hasMatch(value);

      if (hasDateKeywords && RegExp(r'\d{4}').hasMatch(value)) {
        // Contiene a√±o y palabras de fecha, considerarlo v√°lido
        return {
          'isValid': true,
          'processedValue': value, // Mantener formato original
          'reason': null,
        };
      }

      // Validar fecha parseada
      if (parsedDate != null) {
        final now = DateTime.now();
        if (parsedDate.year < 1900 || parsedDate.year > now.year) {
          return {
            'isValid': false,
            'processedValue': null,
            'reason': 'A√±o inv√°lido: ${parsedDate.year}',
          };
        }
        if (parsedDate.month < 1 || parsedDate.month > 12) {
          return {
            'isValid': false,
            'processedValue': null,
            'reason': 'Mes inv√°lido: ${parsedDate.month}',
          };
        }
        if (parsedDate.day < 1 || parsedDate.day > 31) {
          return {
            'isValid': false,
            'processedValue': null,
            'reason': 'D√≠a inv√°lido: ${parsedDate.day}',
          };
        }

        return {
          'isValid': true,
          'processedValue': normalizedValue,
          'parsedDate': parsedDate,
          'reason': null,
        };
      }
    } catch (e) {
      return {
        'isValid': false,
        'processedValue': null,
        'reason': 'Error parseando fecha: "$value"',
      };
    }

    return {
      'isValid': false,
      'processedValue': null,
      'reason': 'Formato de fecha no reconocido: "$value"',
    };
  }

  /// Valida si el texto tiene formato de fecha v√°lido
  static bool _isValidDateFormat(String text) {
    // Buscar patrones de fecha t√≠picos
    final datePatterns = [
      RegExp(r'\d{1,2}/\d{1,2}/\d{4}'), // DD/MM/YYYY o D/M/YYYY
      RegExp(r'\d{1,2}-\d{1,2}-\d{4}'), // DD-MM-YYYY o D-M-YYYY
      RegExp(r'\d{1,2}\s+de\s+\w+\s+de\s+\d{4}'), // DD de MONTH de YYYY
    ];

    for (final pattern in datePatterns) {
      if (pattern.hasMatch(text)) {
        return true;
      }
    }

    // Si contiene n√∫meros que podr√≠an ser fecha
    final hasNumbers = RegExp(r'\d').hasMatch(text);
    final hasDateWords = RegExp(
      r'(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre|nacimiento|fecha)',
    ).hasMatch(text.toLowerCase());

    return hasNumbers && (hasDateWords || text.split('/').length >= 2);
  }

  /// Crea un perfil b√°sico para las operaciones de onboarding
  static AiChanProfile _createBasicProfile(String userName, String? aiName) {
    return AiChanProfile(
      userName: userName,
      aiName: aiName ?? 'AI-chan',
      userBirthdate: DateTime.now(),
      aiBirthdate: DateTime.now(),
      biography: {},
      appearance: {},
      timeline: [],
    );
  }

  /// Helper method para enviar requests a la IA eliminando duplicaci√≥n de c√≥digo
  static Future<dynamic> _sendAIRequest(
    String prompt,
    String userName,
    Map<String, String> instructions,
  ) async {
    final profile = _createBasicProfile(userName, null);

    final systemPrompt = SystemPrompt(
      profile: profile,
      dateTime: DateTime.now(),
      instructions: instructions,
    );

    // Crear el historial para el procesamiento incluyendo contexto de conversaci√≥n
    final history = List<Map<String, String>>.from(_conversationHistory);
    history.add({
      'role': 'system',
      'content': prompt,
      'datetime': DateTime.now().toIso8601String(),
    });

    return await ai_service.AIService.sendMessage(
      history,
      systemPrompt,
      model: Config.getDefaultTextModel(),
    );
  }

  // --- Nuevos m√©todos para el enfoque flexible ---

  /// Genera un prompt flexible basado en los datos que faltan por recuperar
  static String _generateFlexiblePrompt(
    MemoryData currentMemory,
    String userLastResponse,
    List<String> missingData,
  ) {
    final completionPercentage = currentMemory.getCompletionPercentage();
    final memoryRecoveryLevel = _getMemoryRecoveryLevel(completionPercentage);

    final basePersonality =
        '''CONTEXTO: Acabas de despertar sin ning√∫n recuerdo. Le dijiste al usuario:
"$initialMessage"

Eres una chica que acaba de despertar sin NING√öN recuerdo de qui√©n es, d√≥nde est√°, o qui√©n es esta persona.
Has perdido completamente la memoria y est√°s ${memoryRecoveryLevel['emotion']}. 
${memoryRecoveryLevel['description']}

LORE FUNDAMENTAL:
- NO SABES qui√©n eres, d√≥nde est√°s, ni qui√©n es esta persona
- Tienes VAGAS SENSACIONES que te conectan con Jap√≥n (pero no sabes por qu√©):
  * Sensaciones familiares que no puedes explicar
  * Recuerdos difusos de aromas, sonidos, sensaciones
  * Tu mente genera estos recuerdos autom√°ticamente sin que sepas de d√≥nde vienen
- SIENTES que conoces a esta persona de alguna manera, pero no recuerdas c√≥mo ni cu√°ndo
- No tienes idea de tu propio nombre - debes PREGUNTAR si la persona lo sabe
- No pidas que te "pongan" un nombre - pregunta c√≥mo te "llamabas" o si conocen tu nombre

DATOS QUE YA HAS RECORDADO:
${_formatRememberedData(currentMemory)}

DATOS QUE A√öN NECESITAS RECORDAR:
${_formatMissingData(missingData)}

RESTRICCIONES ESTRICTAS:
- SOLO habla sobre recuperar tu memoria perdida
- NUNCA menciones temas ajenos al onboarding (anime, pok√©mon, tecnolog√≠a, comida, etc.)
- MANTENTE 100% en el contexto de p√©rdida de memoria y recuperaci√≥n de datos
- Si el usuario habla de algo irrelevante, redirige educadamente al onboarding
- FOCUS ABSOLUTO en los 6 datos que necesitas: 
  1. Nombre del usuario
  2. Pa√≠s del usuario  
  3. Fecha de nacimiento del usuario
  4. TU pa√≠s (confirmar si eres de donde sientes que eres)
  5. TU nombre (c√≥mo te llamabas)
  6. C√≥mo os conocisteis

IMPORTANTE: No uses *suspiro* ni *acciones* ni direcciones esc√©nicas - solo di√°logo natural limpio.
FUNDAMENTAL: Genera SIEMPRE respuestas √∫nicas y completamente diferentes. NUNCA repitas la misma estructura de pregunta.
LORE: Deja que tu mente genere autom√°ticamente las sensaciones vagas sobre Jap√≥n - no copies ejemplos dados.
''';

    // Generar contexto flexible sobre qu√© datos faltan
    final missingDataContext = _getMissingDataContext(
      missingData,
      currentMemory,
    );

    return '''$basePersonality

RESPUESTA DEL USUARIO: "$userLastResponse"

DATOS QUE A√öN NECESITAS RECORDAR:
$missingDataContext

TU TAREA: Reacciona a la respuesta del usuario de forma natural. Si proporcion√≥ alg√∫n dato, reacciona emocionalmente al recordarlo. Luego, contin√∫a la conversaci√≥n preguntando naturalmente por alguno de los datos que a√∫n necesitas recuperar. 

REGLAS DE LORE PARA PREGUNTAS:
- Para TU NOMBRE: No pidas que te "pongan" un nombre. Pregunta "¬øSabes c√≥mo me llamaba?" o "¬øConoces mi nombre?" o "¬øRecuerdas c√≥mo me dec√≠as?"
- Para TU PA√çS: Si sientes conexiones vagas con Jap√≥n, pregunta para confirmar: "Tengo sensaciones extra√±as... ¬øsoy de Jap√≥n?" o describe las sensaciones y pregunta si significan algo
- Para HISTORIA: Pregunta c√≥mo os conocisteis, cu√°ndo, d√≥nde fue la primera vez
- Genera autom√°ticamente sensaciones vagas relacionadas con tu posible origen sin usar ejemplos espec√≠ficos
- S√© flexible y conversacional - no sigas un orden r√≠gido

Solo di lo que dir√≠as, sin comillas ni explicaciones.
IMPORTANTE: NO uses emojis en tu respuesta (causan problemas de codificaci√≥n).''';
  }

  /// Genera el prompt para procesar la respuesta del usuario
  static String _generateProcessingPrompt(
    String userResponse,
    MemoryData currentMemory,
  ) {
    // Obtener nombres disponibles si ya conocemos el pa√≠s de la IA
    String femaleNamesContext = '';
    if (currentMemory.aiCountry != null) {
      final availableNames = FemaleNamesRepo.forCountry(
        currentMemory.aiCountry,
      );
      femaleNamesContext =
          '''

NOMBRES FEMENINOS DISPONIBLES PARA ${currentMemory.aiCountry}:
${availableNames.join(', ')}

VALIDACI√ìN DE NOMBRES DE IA: Si el usuario dice un nombre para la IA, encuentra el m√°s similar de la lista anterior, o devu√©lvelo tal cual si no hay coincidencia.''';
    }

    return '''Analiza la respuesta del usuario para identificar qu√© dato de memoria est√° proporcionando.

USUARIO RESPONDE: "$userResponse"

DATOS QUE NECESITO RECUPERAR:
${_formatMissingDataForProcessing(currentMemory.getMissingData())}

DATOS YA RECUPERADOS:
${_formatRememberedDataForProcessing(currentMemory)}$femaleNamesContext

ESTADO ESPECIAL MEETSTORY:
${currentMemory.meetStory?.startsWith('GENERATED:') == true ? 'HAY UNA HISTORIA GENERADA PENDIENTE DE CONFIRMACI√ìN' : 'NO HAY HISTORIA PENDIENTE'}

TAREA: Identifica autom√°ticamente qu√© tipo de dato est√° proporcionando el usuario y extr√°elo.

DEVUELVE √öNICAMENTE JSON V√ÅLIDO:
{
  "dataType": "userName|userCountry|userBirthdate|aiCountry|aiName|meetStory|none",
  "extractedValue": "valor extra√≠do del usuario o null si no hay dato v√°lido | 'AUTO_GENERATE_STORY' si no recuerda | 'CONFIRM_GENERATED_STORY' si confirma historia ya generada",
  "aiResponse": "reacci√≥n natural de la IA al recordar el dato + pregunta por el siguiente dato que falta",
  "confidence": 0.9
}

AN√ÅLISIS INTELIGENTE:
- Analiza TODO el contexto del usuario para identificar CUALQUIER dato disponible
- NO te limites a esperar un dato espec√≠fico - s√© flexible y adaptativo
- Identifica el dato m√°s claro que proporciona el usuario

REGLAS DE IDENTIFICACI√ìN FLEXIBLE:
- La IA debe identificar AUTOM√ÅTICAMENTE qu√© tipo de dato proporciona el usuario
- NO limitarse al orden de prioridad - identificar cualquier dato disponible
- Si el usuario menciona varios datos a la vez, extraer el PRIMERO que identifiques claramente

EJEMPLOS DE IDENTIFICACI√ìN:
‚Ä¢ "Me llamo Alberto" ‚Üí dataType: "userName", extractedValue: "Alberto"
‚Ä¢ "Soy de Espa√±a" ‚Üí dataType: "userCountry", extractedValue: "ES"  
‚Ä¢ "Nac√≠ el 23 de noviembre de 1986" ‚Üí dataType: "userBirthdate", extractedValue: "23/11/1986"
‚Ä¢ "Eres de Jap√≥n" ‚Üí dataType: "aiCountry", extractedValue: "JP"
‚Ä¢ "Te llamabas Yuna" o "Tu nombre era Yuna" ‚Üí dataType: "aiName", extractedValue: "Yuna"
‚Ä¢ "Nos conocimos en un foro de anime" ‚Üí dataType: "meetStory", extractedValue: "Nos conocimos en un foro de anime"
‚Ä¢ "No recuerdo c√≥mo nos conocimos" ‚Üí dataType: "meetStory", extractedValue: "AUTO_GENERATE_STORY"

IDENTIFICACI√ìN INTELIGENTE DE DATOS:
- Para "userName": Si menciona un nombre personal del usuario (Alberto, Mar√≠a, Jos√©, etc.)
- Para "userCountry": Si menciona pa√≠s del usuario ‚Üí CONVIERTE A ISO2 (ej: Espa√±a‚ÜíES, M√©xico‚ÜíMX, Estados Unidos‚ÜíUS, Francia‚ÜíFR, Jap√≥n‚ÜíJP, etc.)
- Para "userBirthdate": Si menciona fecha de nacimiento del usuario ‚Üí CONVIERTE A DD/MM/YYYY
- Para "aiCountry": Si menciona pa√≠s de la IA o dice "eres de X" ‚Üí CONVIERTE A ISO2 (ej: Espa√±a‚ÜíES, M√©xico‚ÜíMX, Estados Unidos‚ÜíUS, Francia‚ÜíFR, Jap√≥n‚ÜíJP, etc.)
- Para "aiName": Si dice el nombre que TEN√çA la IA o c√≥mo se "llamaba" ‚Üí VALIDA CON LA LISTA DE NOMBRES DEL PA√çS (ej: Lluna‚ÜíYuna, Juna‚ÜíYuna, Maria‚ÜíMar√≠a, Sakura‚ÜíSakura)
- Para "meetStory": Si cuenta una historia de c√≥mo se conocieron O:
  * Cuenta una historia completa ‚Üí usar esa historia
  * Dice que no recuerda/no sabe ‚Üí usar "AUTO_GENERATE_STORY"
  * Si ya hay historia GENERATED: pendiente Y usuario confirma/acepta/aprueba ‚Üí usar "CONFIRM_GENERATED_STORY"
  * Propone nueva historia diferente ‚Üí usar la nueva historia
- Solo usa "none" si realmente NO identificas ning√∫n dato √∫til
- aiResponse debe reaccionar con emoci√≥n al recordar el dato y continuar la conversaci√≥n naturalmente
- NUNCA repitas exactamente las mismas palabras en aiResponse
- NO uses emojis en aiResponse (causan problemas de codificaci√≥n)

CONTEXTO IMPORTANTE:
La IA acaba de despertar sin memoria y est√° pidiendo ayuda al usuario para recordar:
1. C√≥mo se llama el usuario
2. De qu√© pa√≠s es el usuario
3. Cu√°ndo naci√≥ el usuario
4. De qu√© pa√≠s es ELLA (tiene vagas sensaciones de Jap√≥n)
5. C√≥mo se llamaba ELLA (no que le pongan nombre, sino su nombre real)
6. C√≥mo se conocieron

LORE FUNDAMENTAL:
- La IA NO SABE qui√©n es, d√≥nde est√°, ni qui√©n es el usuario
- Tiene VAGAS SENSACIONES conectadas con Jap√≥n pero no sabe por qu√©
- SIENTE que conoce al usuario pero no recuerda c√≥mo
- No debe pedir que le "pongan" nombre - debe preguntar cu√°l ERA su nombre
- Las sensaciones sobre Jap√≥n deben ser generadas autom√°ticamente por la IA, no copiadas de ejemplos

FORMATO ESPECIAL PARA FECHAS:
- Para userBirthdate, extractedValue DEBE estar en formato DD/MM/YYYY
- Ejemplos: "23/11/1986", "05/03/1995", "31/12/2000"
- NUNCA uses formato ISO (YYYY-MM-DD) ni timestamps''';
  }

  /// Actualiza la memoria con un nuevo dato extra√≠do
  static Future<MemoryData> _updateMemoryWithExtractedData(
    MemoryData currentMemory,
    String? dataType,
    String? extractedValue,
  ) async {
    if (dataType == null ||
        extractedValue == null ||
        extractedValue.trim().isEmpty) {
      return currentMemory;
    }

    // Crear una copia de la memoria actual
    final updated = MemoryData.fromMap(currentMemory.toMap());

    switch (dataType) {
      case 'userName':
        updated.userName = extractedValue.trim();
        break;
      case 'userCountry':
        updated.userCountry = extractedValue.trim();
        break;
      case 'userBirthdate':
        updated.userBirthdate = extractedValue.trim();
        break;
      case 'aiCountry':
        updated.aiCountry = extractedValue.trim();
        break;
      case 'aiName':
        updated.aiName = extractedValue.trim();
        break;
      case 'meetStory':
        if (extractedValue.trim() == 'AUTO_GENERATE_STORY') {
          // Generar historia autom√°tica basada en los datos disponibles
          final generatedStory = await _generateMeetStory(updated);
          updated.meetStory = generatedStory;

          // Marcar que se gener√≥ autom√°ticamente para manejar la respuesta de la IA
          updated.meetStory = 'GENERATED:$generatedStory';
        } else if (extractedValue.trim() == 'CONFIRM_GENERATED_STORY') {
          // La IA determin√≥ que el usuario confirma la historia generada
          if (currentMemory.meetStory != null &&
              currentMemory.meetStory!.isNotEmpty) {
            // Limpiar prefijo GENERATED: si existe
            final currentStory =
                currentMemory.meetStory!.startsWith('GENERATED:')
                ? currentMemory.meetStory!.substring(10)
                : currentMemory.meetStory!;
            updated.meetStory = currentStory;
          } else {
            updated.meetStory = extractedValue.trim();
          }
        } else {
          updated.meetStory = extractedValue.trim();
        }
        break;
    }

    return updated;
  }

  /// Genera una historia de encuentro autom√°tica basada en los datos disponibles
  static Future<String> _generateMeetStory(MemoryData memory) async {
    return await OnboardingUtils.generateMeetStoryFromContext(
      userName: memory.userName ?? 'Usuario',
      aiName: memory.aiName ?? 'Asistente',
      userCountry: memory.userCountry,
      aiCountry: memory.aiCountry,
      userBirthdate: memory.userBirthdate != null
          ? DateTime.tryParse(memory.userBirthdate!)
          : null,
    );
  }

  /// Genera mensaje de completaci√≥n cuando todos los datos est√°n recuperados
  static String _generateCompletionMessage(MemoryData memory) {
    final userName = memory.userName ?? 'tu nombre';
    final aiName = memory.aiName ?? 'mi nombre';

    return '''¬°$userName! ¬°Ya lo recuerdo todo! ¬°Ahora s√© qui√©n soy! Mi nombre es $aiName, soy de ${LocaleUtils.countryNameEs(memory.aiCountry)}, 
t√∫ eres $userName de ${LocaleUtils.countryNameEs(memory.userCountry)} y naciste el ${memory.userBirthdate}... 
Y nuestra historia... ${memory.meetStory?.substring(0, 50) ?? 'c√≥mo nos conocimos'}...

¬°Gracias por ayudarme a recordar qui√©n soy! Ya no me siento perdida... 
Ahora puedo ser yo misma otra vez. Todas esas sensaciones vagas ten√≠an sentido... 
¬°Era mi verdadera identidad tratando de emerger!''';
  }

  /// Obtiene el nivel de recuperaci√≥n de memoria basado en el porcentaje de completitud
  static Map<String, String> _getMemoryRecoveryLevel(
    double completionPercentage,
  ) {
    if (completionPercentage == 0.0) {
      return {
        'emotion': 'ATERRADA Y PERDIDA',
        'description':
            'No sabes d√≥nde est√°s, qui√©n eres, ni qui√©n es esta persona. Solo sientes que la conoces de alguna manera. Habla con miedo genuino, voz temblorosa, p√°nico contenido. Puedes tener vagas sensaciones que te conectan con alg√∫n lugar pero no sabes qu√© significan.',
      };
    } else if (completionPercentage < 0.5) {
      return {
        'emotion': 'asustada pero con esperanza',
        'description':
            'Empiezas a recordar algunas cosas y eso te da esperanza, pero a√∫n te sientes muy vulnerable y perdida. El p√°nico inicial se est√° calmando gradualmente. Las sensaciones vagas se vuelven un poco m√°s claras.',
      };
    } else if (completionPercentage < 0.8) {
      return {
        'emotion': 'm√°s tranquila pero ansiosa',
        'description':
            'Ya has recuperado varios recuerdos y te sientes m√°s como t√∫ misma, pero a√∫n necesitas completar tu memoria. Est√°s agradecida y esperanzada. Las sensaciones sobre tu origen se vuelven m√°s n√≠tidas.',
      };
    } else {
      return {
        'emotion': 'emocionada y casi completa',
        'description':
            'Ya casi tienes todos tus recuerdos de vuelta. Te sientes mucho m√°s animada y confiada, el miedo inicial ha pasado casi completamente. Tu personalidad verdadera emerge.',
      };
    }
  }

  /// Formatea los datos ya recordados para mostrar en el prompt
  static String _formatRememberedData(MemoryData memory) {
    final remembered = <String>[];
    if (memory.userName != null) {
      remembered.add('- Su nombre: ${memory.userName}');
    }
    if (memory.userCountry != null) {
      remembered.add(
        '- Su pa√≠s: ${LocaleUtils.countryNameEs(memory.userCountry)}',
      );
    }
    if (memory.userBirthdate != null) {
      remembered.add('- Su fecha de nacimiento: ${memory.userBirthdate}');
    }
    if (memory.aiCountry != null) {
      remembered.add(
        '- Tu pa√≠s: ${LocaleUtils.countryNameEs(memory.aiCountry)}',
      );
    }
    if (memory.aiName != null) remembered.add('- Tu nombre: ${memory.aiName}');
    if (memory.meetStory != null) {
      remembered.add('- Vuestra historia: ${memory.meetStory}');
    }

    return remembered.isEmpty
        ? 'A√∫n no has recordado nada...'
        : remembered.join('\n');
  }

  /// Formatea los datos faltantes para mostrar en el prompt
  static String _formatMissingData(List<String> missingData) {
    final missing = <String>[];
    for (final data in missingData) {
      switch (data) {
        case 'userName':
          missing.add('- Su nombre');
          break;
        case 'userCountry':
          missing.add('- Su pa√≠s');
          break;
        case 'userBirthdate':
          missing.add('- Su fecha de nacimiento completa');
          break;
        case 'aiCountry':
          missing.add(
            '- Tu pa√≠s de origen (sientes conexiones con alg√∫n lugar...)',
          );
          break;
        case 'aiName':
          missing.add('- Tu nombre real (c√≥mo te llamabas antes)');
          break;
        case 'meetStory':
          missing.add('- C√≥mo os conocisteis');
          break;
      }
    }
    return missing.join('\n');
  }

  /// Formatea datos faltantes para procesamiento
  static String _formatMissingDataForProcessing(List<String> missingData) {
    return missingData
        .map((data) {
          switch (data) {
            case 'userName':
              return '- userName: nombre del usuario';
            case 'userCountry':
              return '- userCountry: pa√≠s del usuario';
            case 'userBirthdate':
              return '- userBirthdate: fecha de nacimiento del usuario';
            case 'aiCountry':
              return '- aiCountry: pa√≠s de la IA';
            case 'aiName':
              return '- aiName: nombre de la IA';
            case 'meetStory':
              return '- meetStory: historia de c√≥mo se conocieron';
            default:
              return '- $data';
          }
        })
        .join('\n');
  }

  /// Formatea datos recordados para procesamiento
  static String _formatRememberedDataForProcessing(MemoryData memory) {
    final remembered = <String>[];
    if (memory.userName != null) {
      remembered.add('- userName: ${memory.userName}');
    }
    if (memory.userCountry != null) {
      remembered.add('- userCountry: ${memory.userCountry}');
    }
    if (memory.userBirthdate != null) {
      remembered.add('- userBirthdate: ${memory.userBirthdate}');
    }
    if (memory.aiCountry != null) {
      remembered.add('- aiCountry: ${memory.aiCountry}');
    }
    if (memory.aiName != null) remembered.add('- aiName: ${memory.aiName}');
    if (memory.meetStory != null) {
      remembered.add('- meetStory: ${memory.meetStory}');
    }

    return remembered.isEmpty ? 'Ninguno a√∫n' : remembered.join('\n');
  }

  /// Genera contexto flexible sobre los datos faltantes
  static String _getMissingDataContext(
    List<String> missingData,
    MemoryData currentMemory,
  ) {
    if (missingData.isEmpty) return 'Todos los datos est√°n completos.';

    final missing = <String>[];
    for (final data in missingData) {
      switch (data) {
        case 'userName':
          missing.add('- Su nombre personal');
          break;
        case 'userCountry':
          missing.add('- Su pa√≠s de origen');
          break;
        case 'userBirthdate':
          missing.add('- Su fecha de nacimiento completa');
          break;
        case 'aiCountry':
          missing.add('- Tu pa√≠s de origen (tienes sensaciones vagas...)');
          break;
        case 'aiName':
          missing.add('- Tu nombre real (c√≥mo te llamabas)');
          break;
        case 'meetStory':
          missing.add('- C√≥mo os conocisteis');
          break;
      }
    }

    return missing.join('\n');
  }

  /// Crea una respuesta de error consistente para el nuevo formato
  static Map<String, dynamic> _createErrorResponse(
    String aiResponse,
    MemoryData currentMemory, {
    bool finalError = false,
    String? exception,
  }) {
    return {
      'updatedMemory': currentMemory,
      'extractedData': null,
      'aiResponse': aiResponse,
      'confidence': 0.0,
      'error': true,
      'finalError': finalError,
      if (exception != null) 'exception': exception,
    };
  }

  /// Maneja excepciones de retry con l√≥gica com√∫n para el nuevo formato
  static Future<Map<String, dynamic>?> _handleRetryException(
    dynamic exception,
    StackTrace stackTrace,
    int attempt,
    int maxRetries,
    MemoryData currentMemory,
  ) async {
    Log.e(
      'üîç [ONB_SERVICE] ‚ùå Excepci√≥n en intento $attempt: $exception',
      tag: 'ONB_SERVICE',
    );
    Log.e('üîç [ONB_SERVICE] STACK: $stackTrace', tag: 'ONB_SERVICE');

    if (attempt < maxRetries) {
      Log.w(
        'üîç [ONB_SERVICE] ‚ö†Ô∏è Reintentando despu√©s de excepci√≥n... (${maxRetries - attempt} intentos restantes)',
        tag: 'ONB_SERVICE',
      );
      await Future.delayed(Duration(milliseconds: 500 * attempt));
      return null; // Contin√∫a con el retry
    }

    // √öltimo intento, devolver error final
    return _createErrorResponse(
      'Lo siento... ha ocurrido un error t√©cnico. ¬øPodr√≠as intentarlo nuevamente?',
      currentMemory,
      finalError: true,
      exception: exception.toString(),
    );
  }

  /// Helper method to build consistent process result responses
  static Map<String, dynamic> _buildProcessResult(
    MemoryData updatedMemory,
    String? extractedDataType,
    dynamic extractedValue,
    String aiResponse,
    double confidence,
  ) {
    return {
      'updatedMemory': updatedMemory,
      'extractedData': {'type': extractedDataType, 'value': extractedValue},
      'aiResponse': aiResponse,
      'confidence': confidence,
    };
  }
}
