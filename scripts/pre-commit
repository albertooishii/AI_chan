#!/usr/bin/env bash
set -euo pipefail

# Establece un locale UTF-8 para el entorno del hook para evitar warnings
# como: "bash: warning: setlocale: LC_ALL: cannot change locale (en_US.UTF-8)"
# Intenta usar es_ES.UTF-8 si est√° disponible, si no, cae a C.UTF-8 (seguro).
if command -v locale >/dev/null 2>&1; then
	if locale -a 2>/dev/null | grep -qi '^es_ES\(.utf8\|.UTF-8\)?$\|^es_ES\.utf8$\|^es_ES\.UTF-8$'; then
		export LANG=es_ES.UTF-8
		export LC_ALL=es_ES.UTF-8
	else
		# Spanish locale no disponible: usar un locale UTF-8 seguro para evitar warnings
		export LANG=C.UTF-8
		export LC_ALL=C.UTF-8
	fi
else
	export LANG=C.UTF-8
	export LC_ALL=C.UTF-8
fi

echo "[pre-commit] Formatting code with dart format..."
dart format lib/ test/
# Si hubo cambios de formateo, agregarlos autom√°ticamente
git add lib/ test/

echo "[pre-commit] Applying automatic fixes with dart fix..."
dart fix --apply

# Verificar si dart fix hizo cambios y agregarlos autom√°ticamente
if [[ $(git diff --name-only) ]]; then
    echo "[pre-commit] Auto-staging files modified by dart fix..."
    # Mostrar qu√© archivos fueron modificados para transparencia
    echo "Modified files:"
    git diff --name-only | sed 's/^/  - /'
    # Agregar solo archivos Dart que estaban en el staging area original
    git diff --name-only | grep '\.dart$' | xargs -r git add
    echo "‚úÖ [pre-commit] Modified files have been automatically staged"
fi

echo "[pre-commit] Running flutter analyze..."
# Solo fallar en errores y warnings, permitir info level
# Las nuevas reglas DDD/Hexagonal est√°n en info level para migraci√≥n gradual
if flutter analyze --no-fatal-infos; then
    echo "‚úÖ [pre-commit] ANALYZE PASSED! (info level allowed)"
else
    echo "‚ùå [pre-commit] ANALYZE FAILED! Critical errors or warnings found."
    echo "üí° Info level violations are allowed during DDD migration."
    echo "üí° Use 'git commit --no-verify' to skip pre-commit hooks if needed."
    exit 1
fi

echo "[pre-commit] Running flutter test..."
if flutter test --coverage; then
    echo "‚úÖ [pre-commit] TESTS PASSED!"
else
    echo "‚ùå [pre-commit] TESTS FAILED! Commit aborted."
    echo "üí° Use 'git commit --no-verify' to skip pre-commit hooks if needed."
    exit 1
fi

echo "üéâ [pre-commit] ALL CHECKS PASSED SUCCESSFULLY!"

# Verificaci√≥n final: asegurar que no hay archivos modificados sin staging
if [[ $(git diff --name-only) ]]; then
    echo "‚ö†Ô∏è [pre-commit] WARNING: Some files were modified but not staged:"
    git diff --name-only | sed 's/^/  - /'
    echo ""
    echo "This might indicate an issue with the pre-commit hook."
    echo "Run 'git add .' and commit again if these changes should be included."
    echo ""
    echo "Continuing with commit (files will remain unstaged)..."
fi
